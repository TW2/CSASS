using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CSASS
{
    public class Csass
    {
        private List<CA_Event> events = new List<CA_Event>();
        private List<CA_Style> styles = new List<CA_Style>();
        private CA_Infos assinfos = new CA_Infos();

        public Csass()
        {

        }

        public void LoadASS(string path)
        {
            string line;
            events.Clear();
            styles.Clear();

            using(StreamReader sr = new StreamReader(path))
            {
                while ((line = sr.ReadLine()) != null)
                {
                    if (!line.StartsWith("Style") & !line.StartsWith("Dialogue") & !line.StartsWith("Comment"))
                    {
                        assinfos.TryAdd(line);
                    }

                    if (line.StartsWith("Style"))
                    {
                        CA_Style asss = new CA_Style(line);
                        styles.Add(asss);
                    }

                    if (line.StartsWith("Dialogue") | line.StartsWith("Comment"))
                    {
                        CA_Event txt = new CA_Event(line);
                        events.Add(txt);
                    }
                }
            }
        }

        public void SaveASS(string path, string software = "CSASS library", string website = "unknown")
        {
            using(StreamWriter sw = new StreamWriter(path))
            {
                sw.AutoFlush = true;

                sw.WriteLine("[Script Info]");
                sw.WriteLine("; Script generated by " + software);
                if (website != "unknown") { sw.WriteLine("; " + website); }

                sw.WriteLine("Title: " + assinfos.Title);
                sw.WriteLine("Original Script: " + assinfos.OriginalScript);
                sw.WriteLine("Original Translation: " + assinfos.OriginalTranslation);
                sw.WriteLine("Original Editing: " + assinfos.OriginalEditing);
                sw.WriteLine("Original Timing: " + assinfos.OriginalTiming);
                sw.WriteLine("Original Script Checking: " + assinfos.OriginalScriptChecking);
                sw.WriteLine("ScriptType: " + assinfos.ScriptType);
                sw.WriteLine("PlayResX: " + assinfos.PlayResX);
                sw.WriteLine("PlayResY: " + assinfos.PlayResY);
                sw.WriteLine("PlayDepth: " + assinfos.PlayDepth);
                sw.WriteLine("Wav: " + assinfos.Wav);                
                sw.WriteLine("LastWav: " + assinfos.LastWav);
                sw.WriteLine("Timer: " + assinfos.Timer);
                sw.WriteLine("WrapStyle: " + assinfos.WrapStyle);
                sw.WriteLine("Video Aspect Ratio: " + assinfos.VideoAspectRatio);
                sw.WriteLine("Video Zoom: " + assinfos.VideoZoom);
                sw.WriteLine("YCbCr Matrix: " + assinfos.YCbCrMatrix);
                sw.WriteLine("");

                sw.WriteLine("[Aegisub Project Garbage]");
                sw.WriteLine("Last Style Storage: " + assinfos.LastStyleStorage);
                sw.WriteLine("Audio File: " + assinfos.AudioFile);
                sw.WriteLine("Video File: " + assinfos.VideoFile);
                sw.WriteLine("Video AR Mode: " + assinfos.VideoARMode);
                sw.WriteLine("Video AR Value: " + assinfos.VideoARValue);
                sw.WriteLine("Video Zoom Percent: " + assinfos.VideoZoomPercent);
                sw.WriteLine("Active Line: " + assinfos.ActiveLine);
                sw.WriteLine("Video Position: " + assinfos.VideoPosition);
                sw.WriteLine("");

                sw.WriteLine("[V4+ Styles]");
                sw.WriteLine("Format: Name, Fontname, Fontsize," +
                    " PrimaryColour, SecondaryColour, OutlineColour, BackColour," + 
                    " Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle," + 
                    " BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding");
                foreach(CA_Style sty in styles)
                {
                    sw.WriteLine(sty.GetRawLine());
                }
                sw.WriteLine("");

                sw.WriteLine("[Events]");
                sw.WriteLine("Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text");
                foreach(CA_Event evt in events)
                {
                    sw.WriteLine(evt.GetRawLine());
                }
            }
        }

        public List<CA_Event> Events
        {
            get { return events; }
        }

        public List<CA_Style> Styles
        {
            get { return styles; }
        }

        public CA_Infos Infos
        {
            get { return assinfos; }
        }
    }
}
