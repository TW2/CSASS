using CSASS.Common;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CSASS.ASSA
{
    public class ASS_IO
    {
        private List<ASS_Event> events = new List<ASS_Event>();
        private List<ASS_Style> styles = new List<ASS_Style>();
        private ASS_Infos assinfos = new ASS_Infos();

        public ASS_IO()
        {

        }

        public void LoadASS(string path)
        {
            string line;
            events.Clear();
            styles.Clear();

            using (StreamReader sr = new StreamReader(path))
            {
                while ((line = sr.ReadLine()) != null)
                {
                    if (!line.StartsWith("Style") && !line.StartsWith("Dialogue") && !line.StartsWith("Comment"))
                    {
                        assinfos.TryAdd(line);
                    }

                    if (line.StartsWith("Style"))
                    {
                        ASS_Style asss = new ASS_Style(line);
                        styles.Add(asss);
                    }

                    if (line.StartsWith("Dialogue") || line.StartsWith("Comment"))
                    {
                        ASS_Event txt = new ASS_Event(line);
                        events.Add(txt);
                    }
                }
            }
        }

        public void SaveASS(string path, string software = "CSASS library", string website = "unknown")
        {
            using (StreamWriter sw = new StreamWriter(path))
            {
                sw.AutoFlush = true;

                sw.WriteLine("[Script Info]");
                sw.WriteLine("; Script generated by " + software);
                if (website != "unknown") { sw.WriteLine("; " + website); }

                sw.WriteLine("Title: " + assinfos.Title);
                sw.WriteLine("Original Script: " + assinfos.OriginalScript);
                sw.WriteLine("Original Translation: " + assinfos.OriginalTranslation);
                sw.WriteLine("Original Editing: " + assinfos.OriginalEditing);
                sw.WriteLine("Original Timing: " + assinfos.OriginalTiming);
                sw.WriteLine("Original Script Checking: " + assinfos.OriginalScriptChecking);
                sw.WriteLine("ScriptType: " + assinfos.ScriptType);
                sw.WriteLine("PlayResX: " + assinfos.PlayResX);
                sw.WriteLine("PlayResY: " + assinfos.PlayResY);
                sw.WriteLine("PlayDepth: " + assinfos.PlayDepth);
                sw.WriteLine("Wav: " + assinfos.Wav);
                sw.WriteLine("LastWav: " + assinfos.LastWav);
                sw.WriteLine("Timer: " + assinfos.Timer);
                sw.WriteLine("WrapStyle: " + assinfos.WrapStyle);
                sw.WriteLine("Video Aspect Ratio: " + assinfos.VideoAspectRatio);
                sw.WriteLine("Video Zoom: " + assinfos.VideoZoom);
                sw.WriteLine("YCbCr Matrix: " + assinfos.YCbCrMatrix);
                sw.WriteLine("");

                sw.WriteLine("[Aegisub Project Garbage]");
                sw.WriteLine("Last Style Storage: " + assinfos.LastStyleStorage);
                sw.WriteLine("Audio File: " + assinfos.AudioFile);
                sw.WriteLine("Video File: " + assinfos.VideoFile);
                sw.WriteLine("Video AR Mode: " + assinfos.VideoARMode);
                sw.WriteLine("Video AR Value: " + assinfos.VideoARValue);
                sw.WriteLine("Video Zoom Percent: " + assinfos.VideoZoomPercent);
                sw.WriteLine("Active Line: " + assinfos.ActiveLine);
                sw.WriteLine("Video Position: " + assinfos.VideoPosition);
                sw.WriteLine("");

                sw.WriteLine("[V4+ Styles]");
                sw.WriteLine("Format: Name, Fontname, Fontsize," +
                    " PrimaryColour, SecondaryColour, OutlineColour, BackColour," +
                    " Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle," +
                    " BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding");
                foreach (ASS_Style sty in styles)
                {
                    sw.WriteLine(sty.GetRawLine());
                }
                sw.WriteLine("");

                sw.WriteLine("[Events]");
                sw.WriteLine("Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text");
                foreach (ASS_Event evt in events)
                {
                    sw.WriteLine(evt.GetRawLine());
                }
            }
        }

        /// <summary>
        /// Add a dialogue event to Events
        /// </summary>
        /// <param name="layer">Layer in integer</param>
        /// <param name="start">Start in hh:mm:ss:cc format</param>
        /// <param name="end">End in hh:mm:ss:cc format</param>
        /// <param name="style">Name of the Style</param>
        /// <param name="name_or_actor">A string</param>
        /// <param name="marginL">An integer</param>
        /// <param name="marginR">An integer</param>
        /// <param name="marginV">An integer</param>
        /// <param name="effect">A string</param>
        /// <param name="text">Your text or karaoke</param>
        /// <param name="index">Index of the event in Events or not if -1</param>
        public void AddEvent(C_Event.EventType evType, int layer, string start, string end, string style, string name_or_actor,
            int marginL, int marginR, int marginV, string effect, string text, int index = -1)
        {
            ASS_Event cae = new ASS_Event();
            cae.Event.Type = evType;
            cae.Event.Layer = layer;
            cae.Event.Start = C_Time.fromString(start);
            cae.Event.End = C_Time.fromString(end);
            cae.Event.Style = style;
            cae.Event.Name = name_or_actor;
            cae.Event.MarginL = marginL;
            cae.Event.MarginR = marginR;
            cae.Event.MarginV = marginV;
            cae.Event.Effect = effect;
            cae.Event.Text = text;

            if (index != -1)
            {
                events.Insert(index, cae);
            }
            else
            {
                events.Add(cae);
            }
        }

        /// <summary>
        /// Remove an event from Events
        /// </summary>
        /// <param name="index">Index of the event in Events</param>
        public void RemoveEvent(int index)
        {
            events.RemoveAt(index);
        }

        public List<ASS_Event> Events
        {
            get { return events; }
        }

        public List<ASS_Style> Styles
        {
            get { return styles; }
        }

        public ASS_Infos Infos
        {
            get { return assinfos; }
        }

        public void PutStyle(string name, string fontname, string fontsize,
            string firstcolor, string secondcolor, string thirdcolor, string fourthcolor,
            string bold, string italic, string underline, string strikeout,
            string scaleX, string scaleY, string spacing, string angleZ,
            string borderstyle, string outline, string shadow, string alignment,
            string marginL, string marginR, string marginV, string encoding, int index = -1)
        {
            ASS_Style cas = new ASS_Style();

            bool containsName = false;
            foreach (ASS_Style sty in styles)
            {
                if (sty.Name == name)
                {
                    cas = sty;
                    containsName = true;
                    break;
                }
            }

            if (containsName == false) { cas.Name = name; }
            cas.Font = new ASS_Font(fontname, fontsize, bold, italic, underline, strikeout);
            cas.PrimaryColour = ASS_Color.create(firstcolor);
            cas.KaraokeColour = ASS_Color.create(secondcolor);
            cas.OutlineColour = ASS_Color.create(thirdcolor);
            cas.BackColour = ASS_Color.create(fourthcolor);
            cas.ScaleX = Convert.ToSingle(scaleX);
            cas.ScaleY = Convert.ToSingle(scaleY);
            cas.Spacing = Convert.ToInt32(spacing);
            cas.Angle = Convert.ToSingle(angleZ);
            cas.Borderline = Convert.ToInt32(borderstyle);
            cas.Outline = Convert.ToSingle(outline);
            cas.Shadow = Convert.ToSingle(shadow);
            cas.Alignment = Convert.ToInt32(alignment);
            cas.MarginL = Convert.ToInt32(marginL);
            cas.MarginR = Convert.ToInt32(marginR);
            cas.MarginV = Convert.ToInt32(marginV);
            cas.Encoding = Convert.ToInt32(encoding);

            if (index != -1)
            {
                styles.Insert(index, cas);
            }
            else
            {
                styles.Add(cas);
            }
        }

        public void PutStyle(string name, ASS_Font font,
            ASS_Color firstcolor, ASS_Color secondcolor, ASS_Color thirdcolor, ASS_Color fourthcolor,
            float scaleX, float scaleY, int spacing, float angleZ,
            int borderstyle, float outline, float shadow, int alignment,
            int marginL, int marginR, int marginV, int encoding, int index = -1)
        {
            ASS_Style cas = new ASS_Style();

            bool containsName = false;
            foreach (ASS_Style sty in styles)
            {
                if (sty.Name == name)
                {
                    cas = sty;
                    containsName = true;
                    break;
                }
            }

            if (containsName == false) { cas.Name = name; }
            cas.Font = font;
            cas.PrimaryColour = firstcolor;
            cas.KaraokeColour = secondcolor;
            cas.OutlineColour = thirdcolor;
            cas.BackColour = fourthcolor;
            cas.ScaleX = scaleX;
            cas.ScaleY = scaleY;
            cas.Spacing = spacing;
            cas.Angle = angleZ;
            cas.Borderline = borderstyle;
            cas.Outline = outline;
            cas.Shadow = shadow;
            cas.Alignment = alignment;
            cas.MarginL = marginL;
            cas.MarginR = marginR;
            cas.MarginV = marginV;
            cas.Encoding = encoding;

            if (index != -1)
            {
                styles.Insert(index, cas);
            }
            else
            {
                styles.Add(cas);
            }
        }


    }
}
